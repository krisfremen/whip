#!/usr/bin/env python

import gzip
import itertools
import json
import logging
import os
import re
import socket
import sys
import time

import aaargh

from whip.db import Database


logger = logging.getLogger(__name__)


def lookup_and_print(db, ip, dt):
    value = db.lookup(socket.inet_aton(ip), dt)
    if value is None:
        print("No hit found")
    else:
        # XXX: UltraJSON (ujson) does not support pretty printing, so
        # use built-in JSON module instead.
        print(json.dumps(json.loads(value), indent=2, sort_keys=True))


app = aaargh.App(description="Fast IP geo lookup")
app.arg('--database-dir', '--db', default='db')


@app.cmd(name='load', help="Load data")
@app.cmd_arg('data_files', nargs='+')
def load_data(database_dir, data_files):

    from whip.importers.quova import QuovaImporter

    logger.info("Importing %d data files: %r", len(data_files), data_files)

    importers = [
        QuovaImporter(data_file)
        for data_file in data_files
    ]
    iters = [importer.iter_records() for importer in importers]
    db = Database(database_dir, create_if_missing=True)
    db.load(*iters)


@app.cmd(name="lookup")
@app.cmd_arg('ips', help="The IP address(es) to lookup", nargs='+')
@app.cmd_arg('--datetime', '--dt', dest='dt')
def lookup(ips, database_dir, dt):
    db = Database(database_dir)
    for ip in ips:
        lookup_and_print(db, ip, dt)


@app.cmd(name="shell")
@app.cmd_arg('--datetime', '--dt', dest='dt')
def shell(database_dir, dt):
    db = Database(database_dir)
    while True:
        ip = raw_input('IP: ')
        lookup_and_print(db, ip, dt)


@app.cmd(name='perftest', help="Run performance test")
@app.cmd_arg('--iterations', '-n', default=100 * 1000, type=int,
             help="The number of iterations")
@app.cmd_arg('--test-set', type=file)
@app.cmd_arg('--datetime', '--dt', dest='dt')
def perftest(database_dir, iterations, test_set, dt):
    db = Database(database_dir)
    size = 4

    if test_set:
        logger.info("Using test set %r", test_set.name)
        it = itertools.imap(str.strip, test_set)
        it = itertools.imap(socket.inet_aton, it)
    else:
        logger.info("Running %d iterations with random IP addresses",
                    iterations)
        # Use a sliding window over random data to obtain 4 bytes at a time
        rand_bytes = os.urandom(iterations + size - 1)
        it = (rand_bytes[n:n + size] for n in xrange(iterations))

    lookup = db.lookup
    start_time = time.time()
    for n, ip in enumerate(it, 1):
        lookup(ip, dt)

    elapsed = time.time() - start_time
    out = "{:d} lookups in {:.2f}s ({:.2f} req/s)".format(
        n, elapsed, n / elapsed)
    print(out)


@app.cmd
@app.cmd_arg('--host', default='0')
@app.cmd_arg('--port', type=int, default=5555)
def serve(host, port, database_dir):
    from whip.web import app
    app.config['DATABASE_DIR'] = database_dir
    app.run(host=host, port=port)


@app.cmd(
    name='quova-convert-to-v7',
    description="Convert an older Quova data set into V7 format")
@app.cmd_arg('data_file')
@app.cmd_arg('--output-directory', '-o', required=True)
def quova_convert(data_file, output_directory, **kwargs):
    filename_regex = re.compile(
        r'''
        ^
        EDITION_Gold_
        (?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2})
        _v(?P<version>.+)
        \.dat\.gz
        $
        ''',
        re.VERBOSE)
    m = re.match(filename_regex, os.path.basename(data_file))
    if not m:
        logger.error(
            "Input file name %r does not match expected file name format",
            data_file)
        sys.exit(1)

    fmt = 'converted_v{version}_dummy_{year}{month}{day}.csv.gz'
    output_filename = fmt.format(**m.groupdict())

    output_path = os.path.join(output_directory, output_filename)
    reference_file = data_file.replace('.dat', '.ref')

    logger.info(
        "Converting input files %r and %r to output file %r",
        data_file, reference_file, output_path)

    data_fp = gzip.open(data_file, 'r')
    reference_fp = gzip.open(reference_file, 'r')
    output_fp = gzip.open(output_path, 'w')

    from whip.importers.quova import convert_to_v7
    convert_to_v7(data_fp, reference_fp, output_fp)


def main():
    logging.basicConfig(
        format='%(asctime)s (%(name)s) %(levelname)s: %(message)s',
        level=logging.INFO,
    )
    return app.run()


if __name__ == '__main__':
    sys.exit(main())
