#!/usr/bin/env python

import logging
import os
from socket import inet_aton
import sys
import time

import aaargh
import plyvel
import simplejson as json

from whip import Database
from whip.util import open_file

logger = logging.getLogger(__name__)


def json_pp(s):
    return json.dumps(json.loads(s), indent=2, sort_keys=True)


def lookup_and_print(db, ip):
    value = db.lookup(inet_aton(ip))
    if value is None:
        print("No hit found")
    else:
        print(json_pp(value))


app = aaargh.App(description="Fast IP geo lookup")
app.arg('--database-dir', default='db')


@app.cmd(name='load', help="Load data from a CSV file")
@app.cmd_arg('--data', required=True)
@app.cmd_arg('--reference', required=True)
@app.cmd_arg('--tmp-dir', required=True)
def load_data(database_dir, data, reference, tmp_dir):
    logger.info("Loading data from input file %r", data)
    db = Database(database_dir, create_if_missing=True)

    logger.info("Creating temporary database in %r", tmp_dir)
    tmp_db = plyvel.DB(
        tmp_dir,
        create_if_missing=True,
    )

    from whip.importers.quova import QuovaImporter

    try:
        importer = QuovaImporter(
            data_fp=open_file(data),
            ref_fp=open_file(reference),
            tmp_db=tmp_db,
        )

        it = importer.iter_records()
        db.load(it)

    finally:
        tmp_db.close()
        plyvel.destroy_db(tmp_dir)


@app.cmd(name="lookup")
@app.cmd_arg('ips', help="The IP address(es) to lookup", nargs='+')
def lookup(ips, database_dir):
    db = Database(database_dir)
    for ip in ips:
        lookup_and_print(db, ip)


@app.cmd(name="shell")
def shell(database_dir):
    db = Database(database_dir)
    while True:
        ip = raw_input('IP: ')
        lookup_and_print(db, ip)


@app.cmd(name='perftest', help="Run performance test")
@app.cmd_arg('--iterations', default=100 * 1000, type=int,
             help="The number of iterations")
def perftest(iterations, database_dir):
    logger.info("Running %d iterations", iterations)
    db = Database(database_dir)
    size = 4

    # Use a sliding window over random data to obtain 4 bytes at a time
    rand_bytes = os.urandom(iterations + size - 1)

    lookup = db.lookup
    start_time = time.time()
    for n in xrange(iterations):
        lookup(rand_bytes[n:n + size])

    elapsed = time.time() - start_time
    out = "{:d} lookups in {:.2f}s ({:.2f} req/s)".format(
        iterations, elapsed, iterations / elapsed)
    print(out)


def main():
    logging.basicConfig(
        format='%(asctime)s (%(name)s) %(levelname)s: %(message)s',
        level=logging.INFO,
    )
    return app.run()


if __name__ == '__main__':
    sys.exit(main())
