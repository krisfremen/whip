#!/usr/bin/env python

import logging
import os
from socket import inet_aton
import sys
import tempfile
import time

import aaargh
import plyvel
import simplejson as json

from whip import Database


logger = logging.getLogger(__name__)


def json_pp(s):
    return json.dumps(json.loads(s), indent=2, sort_keys=True)


def lookup_and_print(db, ip):
    value = db.lookup(inet_aton(ip))
    if value is None:
        print("No hit found")
    else:
        print(json_pp(value))


app = aaargh.App(description="Fast IP geo lookup")
app.arg('--database-dir', default='db')


@app.cmd(name='load', help="Load data")
@app.cmd_arg('--data-dirs', nargs='+', required=True)
@app.cmd_arg('--tmp-dir')
def load_data(database_dir, data_dirs, tmp_dir):

    logger.info(
        "Importing %d data directories: %r",
        len(data_dirs), data_dirs)

    if tmp_dir is None:
        tmp_dir = tempfile.mkdtemp(prefix='whip-', suffix='.ldb')
    else:
        assert not os.path.exists(tmp_dir)

    logger.info("Creating temporary database in %r", tmp_dir)
    tmp_db = plyvel.DB(tmp_dir, create_if_missing=True, max_open_files=128)

    try:
        from whip.importers.quova import QuovaImporter
        from whip.util import ipv4_int_to_str, merge_ranges

        prefix_generator = (chr(i) for i in xrange(256))
        iters = []
        for data_dir in data_dirs:
            prefix = next(prefix_generator)
            importer = QuovaImporter(
                dir=data_dir,
                tmp_db=tmp_db.prefixed_db(prefix))

            iters.append(importer.iter_records())

        merged = merge_ranges(*iters)
        it = (
            (ipv4_int_to_str(begin), ipv4_int_to_str(end), data)
            for begin, end, data in merged
        )
        db = Database(database_dir, create_if_missing=True)
        db.load(it)

    finally:
        tmp_db.close()
        plyvel.destroy_db(tmp_dir)


@app.cmd(name="lookup")
@app.cmd_arg('ips', help="The IP address(es) to lookup", nargs='+')
def lookup(ips, database_dir):
    db = Database(database_dir)
    for ip in ips:
        lookup_and_print(db, ip)


@app.cmd(name="shell")
def shell(database_dir):
    db = Database(database_dir)
    while True:
        ip = raw_input('IP: ')
        lookup_and_print(db, ip)


@app.cmd(name='perftest', help="Run performance test")
@app.cmd_arg('--iterations', default=100 * 1000, type=int,
             help="The number of iterations")
def perftest(iterations, database_dir):
    logger.info("Running %d iterations", iterations)
    db = Database(database_dir)
    size = 4

    # Use a sliding window over random data to obtain 4 bytes at a time
    rand_bytes = os.urandom(iterations + size - 1)

    lookup = db.lookup
    start_time = time.time()
    for n in xrange(iterations):
        lookup(rand_bytes[n:n + size])

    elapsed = time.time() - start_time
    out = "{:d} lookups in {:.2f}s ({:.2f} req/s)".format(
        iterations, elapsed, iterations / elapsed)
    print(out)


@app.cmd
@app.cmd_arg('--host', default='0')
@app.cmd_arg('--port', type=int, default=5555)
def serve(host, port, database_dir):
    from whip.web import app
    app.config['DATABASE_DIR'] = database_dir
    app.run(host=host, port=port)


def main():
    logging.basicConfig(
        format='%(asctime)s (%(name)s) %(levelname)s: %(message)s',
        level=logging.INFO,
    )
    return app.run()


if __name__ == '__main__':
    sys.exit(main())
