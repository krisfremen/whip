#!/usr/bin/env python

import logging
import json
import os
from socket import inet_aton
import sys
import time

import aaargh

from pigeon import PigeonStore

logger = logging.getLogger('pigeon')


def json_pp(s):
    return json.dumps(json.loads(s), indent=2)


def lookup_and_print(p, ip):
    value = p.lookup(inet_aton(ip))
    if value is None:
        print("No hit found")
    else:
        print(json_pp(value))


app = aaargh.App(description="Fast IP geo lookup")
app.arg('--database-dir')


@app.cmd(name='load', help="Load data from a CSV file")
@app.cmd_arg('input', type=file, nargs='?', default=sys.stdin)
def load_data(input, database_dir):
    logger.info("Loading data from %s", input)
    p = PigeonStore(database_dir, create_if_missing=True)
    p.load(input)


@app.cmd(name="lookup")
@app.cmd_arg('ips', help="The IP address(es) to lookup", nargs='+')
def lookup(ips, database_dir):
    p = PigeonStore(database_dir)
    for ip in ips:
        lookup_and_print(p, ip)


@app.cmd(name="shell")
def shell(database_dir):
    p = PigeonStore(database_dir)
    while True:
        ip = raw_input('IP: ')
        lookup_and_print(p, ip)


@app.cmd(name='perftest', help="Run performance test")
@app.cmd_arg('--iterations', default=100 * 1000, type=int,
             help="The number of iterations")
def perftest(iterations, database_dir):
    logger.info("Running %d iterations", iterations)
    p = PigeonStore(database_dir)
    size = 4

    # Use a sliding window over random data to obtain 4 bytes at a time
    rand_bytes = os.urandom(iterations + size - 1)

    lookup = p.lookup
    start_time = time.time()
    for n in xrange(iterations):
        lookup(rand_bytes[n:n + size])

    elapsed = time.time() - start_time
    out = "{:d} lookups in {:.2f}s ({:.2f} req/s)".format(
        iterations, elapsed, iterations / elapsed)
    print(out)


def main():
    return app.run()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    sys.exit(main())
